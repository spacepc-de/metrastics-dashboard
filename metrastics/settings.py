# metrastics/settings.py
"""
Django settings for metrastics project.

Generated by 'django-admin startproject' using Django 4.2.21.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dotenv
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file from the project root (BASE_DIR)
dotenv_path = BASE_DIR / '.env'
if os.path.exists(dotenv_path):
    dotenv.load_dotenv(dotenv_path)
else:
    print(f"Warning: .env file not found at {dotenv_path}. Using environment variables or defaults.")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-default-for-dev-only') # Provide a default for dev if not set

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 't')

ALLOWED_HOSTS_STRING = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STRING.split(',') if host.strip()]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'metrastics_listener',
    'metrastics_dashboard',
    'django.contrib.humanize',
    'metrastics_commander'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'metrastics.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Optional: if you have global templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'metrastics.context_processors.global_settings_processor', # Removed this line
            ],
        },
    },
]

WSGI_APPLICATION = 'metrastics.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASE_URL = os.getenv('DATABASE_URL', f"sqlite:///{BASE_DIR / 'db.sqlite3'}")
DATABASES = {'default': dj_database_url.parse(DATABASE_URL)}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = os.getenv('LANGUAGE_CODE', 'en-us')

TIME_ZONE = os.getenv('TIME_ZONE', 'UTC')

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
# Optional: Define STATIC_ROOT for collectstatic in production
# STATIC_ROOT = BASE_DIR / 'staticfiles'
# Optional: Define STATICFILES_DIRS if you have static files outside app directories
# STATICFILES_DIRS = [BASE_DIR / "static_global"]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Meshtastic Settings from .env
MESHTASTIC_DEVICE_HOST = os.getenv('MESHTASTIC_DEVICE_HOST', 'localhost')
MESHTASTIC_DEVICE_PORT = int(os.getenv('MESHTASTIC_DEVICE_PORT', '4403'))
# Port for the Flask app in listen_device.py that handles sending messages
LISTENER_FLASK_PORT = os.getenv('LISTENER_FLASK_PORT', '5555')


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'mesh_dashboard_formatter': {
            'format': '%(asctime)s - %(levelname)s - %(name)s - [%(module)s.%(funcName)s:%(lineno)d] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        }
    },
    'handlers': {
        'console': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO').upper(),
            'class': 'logging.StreamHandler',
            'formatter': 'mesh_dashboard_formatter',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO').upper(),
            'propagate': True,
        },
        'metrastics_listener.management.commands.listen_device': {
            'handlers': ['console'],
            'level': os.getenv('LISTENER_LOG_LEVEL', 'INFO').upper(),
            'propagate': False,
        },
        'metrastics_commander': {
            'handlers': ['console'],
            'level': os.getenv('COMMANDER_LOG_LEVEL', 'INFO').upper(),
            'propagate': False,
        },
        'meshtastic': {
            'handlers': ['console'],
            'level': os.getenv('MESHTASTIC_LIB_LOG_LEVEL', 'INFO').upper(),
            'propagate': False,
        },
        'pubsub': {
            'handlers': ['console'],
            'level': os.getenv('PUBSUB_LOG_LEVEL', 'WARNING').upper(),
            'propagate': False,
        },
        'openai': {
            'handlers': ['console'],
            'level': os.getenv('OPENAI_LOG_LEVEL', 'INFO').upper(),
            'propagate': False,
        }
    },
    'root': {
        'handlers': ['console'],
        'level': os.getenv('ROOT_LOG_LEVEL', 'INFO').upper(),
    }
}

# ChatGPT Integration Settings from .env
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', "your_openai_api_key_here")
CHATGPT_TRIGGER_COMMAND = os.getenv('CHATGPT_TRIGGER_COMMAND', "!chat")
CHATGPT_SYSTEM_PROMPT = os.getenv('CHATGPT_SYSTEM_PROMPT', "You are a helpful assistant on a Meshtastic network. Keep your answers concise due to message length limitations. Max 200byte Answer")

if OPENAI_API_KEY == "your_openai_api_key_here" or not OPENAI_API_KEY:
    print("Warning: OPENAI_API_KEY is not set or using placeholder. ChatGPT features will not work.")

if DEBUG and not SECRET_KEY.startswith('django-insecure'):
    print(f"Warning: Using a default SECRET_KEY ('{SECRET_KEY}') for development. Ensure a strong, unique key is set in your .env file for production.")

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
